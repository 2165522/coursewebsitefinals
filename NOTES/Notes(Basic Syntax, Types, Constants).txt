BASIC SYNTAX

PHP tags
	- When PHP parse and encounter the <?php and ?> I tells to the PHP the start and stop of the code and interpret the code inside. 

<?php
 echo "Hello World";

//... more code

 echo "last Statement";

// the script ends here with no PHP closing tag

========================================================================
Escaping from HTML

<p>PHP will ignore this and browser will display p>

<?php echo 'This will analyze ';?>

<p> PHP will ignore this and browser will display </p>

	- when the PHP finish analyze the code and hits the ?> closing tags, it simply start to display whatever it finds . When condition is not what expected the PHP will skip the blocks

*Also note that if you imbedded PHP inside the XML or XHTML is required to put a <?php?>to comply with the standards .
1.  <?php echo 'when attach the PHP into XML or XHTML it is requires to use these tags'; ?>

2.  <? echo 'this code is within short tags, but will only work '.
            'if short_open_tag is enabled'; ?>

3.  <% echo 'This ASP-style tags are optional'; %>
    Code within these tags <%= $variable; %> is a shortcut for this code <% echo $variable; %>
    Both of these syntaxes are removed in PHP 7.0.0.

	- ASP style tags (example five) are only available when they are enabled via the asp_tags php.ini configuration file directive, and have been removed in PHP 7.0.0.

*Using short tags should be avoided when developing applications or libraries that are meant for redistribution, or deployment on PHP servers which are not under your control, because short tags may not be supported on the target server. For portable, redistributable code, be sure not to use short tags.

========================================================================
Instruction Separation

	- You do not need to used a semicolon to terminating the last line of a PHP block. The closing tag for the block will include the immediately trailing newline if one is present.


<?php echo 'This is a Test' ?>

<?php echo 'We omitted the last closing tag';

*Note: in order not to have a unwanted whitespace it is helpful and needed to use a closing tag.


Comments


	-The “one-line” comment style remarks only PHP codes either the current block or the end of the line, whichever comes first, meaning HTML code with // … ?> or # … ?> before them will be printed; having ?> on the other hand breaks out PHP mode returning it to HTML mode while // or # doesn’t affect it. The asp_tags configuration directive acts the same with // %> and # %> when being enabled but the </script> tag cannot break out PHP mode in a one-line comment.

TYPES

Introduction

This ten primitive types supports by the PHP. 

Four Scalar types:

	- boolean
		- Considered as the simplest type in which it only gives a correct value whether it’s TRUE or FALSE.

	SYNTAX	
	Converting to Boolean 
		- Value converting to boolean, (bool) or (boolean) casts is being used but sometimes the cast is dispensable because the value can be converted right away by an operator or control structure requiring a boolean argument.

		- When converting to boolean, the following values are considered FALSE:

			- the boolean FALSE itself
			- the integer 0 (zero)
			- the float 0.0 (zero)
			- the empty string, and the string "0"
			- an array with zero elements
			- the special type NULL (including unset variables)
			- SimpleXML objects created from empty tags
			- Every other value is considered TRUE (including any resource and NAN).

	*like other non-zero number -1 is considered TRUE.

-----------------------------------------------------------------------------------------------------------------------------------------------------

	- integer

Syntax
	- Different types of integers are as follows:

Decimal – base 10
Hexadecimal – base 16, begin the number with 0x in using this notation
Octal – base 8, begin the number with 0 in using this notation
Binary – base 2, begin the number with 0b in using this notation

Can also be preceded by a sign (- or +).

	Integer literals

	<?php
	$a = 1234; // decimal number
	$a = -123; // a negative number
	$a = 0123; // octal number (equivalent to 83 decimal)
	$a = 0x1A; // hexadecimal number (equivalent to 26 decimal)
	$a = 0b11111111; // binary number (equivalent to 255 decimal)
	?>

The formal structure for integer: 

decimal     : [1-9][0-9]*
            | 0

hexadecimal : 0[xX][0-9a-fA-F]+

octal       : 0[0-7]+

binary      : 0[bB][01]+

integer     : [+-]?decimal
            | [+-]?hexadecimal
            | [+-]?octal
            | [+-]?binary

- float (floating-point number, aka double)
		- Floating point numbers which are also known as "floats", "doubles", or "real numbers" can be classified applying this following syntaxes:
			
	Formally:

		LNUM          [0-9]+
		DNUM          ([0-9]*[\.]{LNUM}) | ({LNUM}[\.][0-9]*)
		EXPONENT_DNUM [+-]?(({LNUM} | {DNUM}) [eE][+-]? {LNUM})

	
	Nan
	- Some numeric operations can bring about a value represented  by the constant NAN. 
- NAN Represents any number of various value and ought not be contrasted with different qualities, including itself rather it ought to be checked for utilizing is_nan().
	
- STRING
		- A string is a progression of character that are same as a byte. PHP just backings a 256-character set and does not offer local Unicode bolster.
	Syntax
		- single quoted
			- enclose the string in a single quote is the simplest way (the Character ‘)

		- double quoted
			- When the string is inside of double quotes(‘’) the PHP interpret this. 

			Escaped characters

	Sequence	Meaning
	\n		linefeed (LF or 0x0A (10) in ASCII)
	\r		carriage return (CR or 0x0D (13) in ASCII)
	\t		horizontal tab (HT or 0x09 (9) in ASCII)
	\v		vertical tab (VT or 0x0B (11) in ASCII) (since PHP 5.2.5)
	\e		escape (ESC or 0x1B (27) in ASCII) (since PHP 5.4.4)
	\f		form feed (FF or 0x0C (12) in ASCII) (since PHP 5.2.5)
	\\		backslash
	\$		dollar sign
	\"		double-quote
	\[0-7]{1,3}	the sequence of characters matching the regular 	expression is a character in octal notation, which silently overflows to fit in a byte (e.g. "\400" === "\000")
	\x[0-9A-Fa-f]{1,2}	the sequence of characters matching the regular expression is a character in hexadecimal notation
	\u{[0-9A-Fa-f]+}		the arrangement of characters coordinating the general expression is a Unicode codepoint, which will be yield to the string as that codepoint's UTF-8 portrayal.

Four compound types:	
	- array
		- In PHP an array is an arranged map, a type that connects values to keys. it is used in many ways like for example; it can be considered as an array, list(vestor), hash table(an implementation of a map), dictionary, collection, stack, queue, etc. Trees and multidimensional arrays are possible because array values can be like the other arrays.

	Syntax
		Specifying with array()
Array is made with the assistance of array() language construct. It takes any number of comma-isolated key => value matches as arguments.
	array (
  	  key => value,
 	   key2 => value2,
  	  key3 => value3,
	    ...
	)

	- The comma after the last array component isn't genuinely necessary. This is being improved the situation single-line array, i.e. array (1,2) is favored over array(1,2). In the meantime, the trailing comma is generally being utilized for multi-line array since it lets simpler expansion of new components elements at the end.

A simple array

	The key can either be an integer or a string. The value can be of any type.

	Additionally, the following key casts will occur:
		? Strings that has a valid decimal integer will be cast to the integer type unless the number is preceded by a + sign.
			Example:
				The key "8" will actually be stored under 8. On the other hand "08" will not be cast, as it isn't a valid decimal integer.
		Floats are also cast to integers meaning that the fractional part will be truncated.
			Example:
				The key 8.7 will actually be stored under 8.
		Bools are cast to integers, too
			Example:
				The key true will actually be stored under 1 and the key false under 0.
		Null will be cast to the empty string
			Example:
				The key null will actually be stored under "".
		Arrays and objects cannot be used as keys. Doing so will result in a warning: Illegal offset type.


	- object
		- To create a new object, use the new statement to instantiate a class:
Converting to object
	- Object to Object – Not modified
	- Value of any other type to Object – instance of the stdClass built-in class created
	- NULL – instance is Empty
	- Array that is being transformed to an object having properties named by keys and corresponding values, with the exception of numeric keys which will be inaccessible unless iterated.

	- callable
		- - Call_user_func() or usort() are just few functions that takes user-defined callback functions as parameter. Callback functions, object methods and statistic class methods can not only be simple functions.

        	- A PHP function is passed by its name as a string, any built-in or user-defined function can be utilized but not of language constructs such as:

	- array()
 	- echo
	- empty()
	- eval()
	- exit()
	- isset()
	- list()
	- print
	- unset()

	- A method of an instantiated object is transferred as an array having an object at index 0 and the method name at index 1. Protected and private methods are allowed to access from within a class.

	- iterable
		- A pseudo- type established in PHP 7.1 that takes any array or object implementing the Traversable interface in which this two are iterable using foreach and can be utilized with yield from within a generator.

	Using Iterables 
		-Iterables as a parameter can be a great help specially in knowing that a particular function needs a set of values but a part of it does not give much attention about the form of the value set because it will be utilized with foreach. A TypeError will be thrown if a value is not an array or instance.

Iterable can also be used as a return type to indicate a function will return an iterable value. If the returned value is not an array or instance of Traversable, a TypeError will be thrown.

NULL
		- It represents a variable having no value and the only possible value of type null.

	Variable that is null to be considered are as follows:
		- it has been assigned the constant NULL.
		- it has not been set to any value yet.
		- it has been unset().

Syntax
	- There is only one value of type null, and that is the case-insensitive constant NULL.
	
PSEUDO TYPE
	- They are keywords that are being used in the PHP documentation in knowing the types or values an argument can have but they are not primitives of the PHP language. Thus, pseudo types as typehints cannot be utilize in your own custom functions.

	- mixed
		- It tells that a parameter may take multiple types but not all of it.

Example:
gettype() – accepts all PHP types
str_replace – accepts string and arrays
	- number
		- It tells that a parameter can be either integer or float.

	- callback (aka callable)
		-Before callable type was introduced by PHP 5.4, callback pseudo type was first used in the documentation, having it exactly the same.
	- array| object
		- array|object indicates that a parameter can be either array or object.
	- void
		-Return type – the return value is useless

TYPE JUGGLING

	- A clear sort definition is not much needed in variable declaration of PHP, variable’s type is known by the context in which it is used. It explains that if a string is assigned to variable $var, $var still turns out to be a string and if an integer value is then assigned to $var, it also still becomes an integer.

	- Multiplication operator ‘x’ is an example for PHP automatic type conversion. If either operand is a float, then both operands are evaluated as floats and the outcome will also be a float if not, the operands will be interpreted as integers and the result will also be an integer. Remember that there will be no change in the types of operands themselves, only on how the operands are assessed and the type of expression itself that has a change.
	
*Note:
The behaviour of an automatic conversion to array is currently undefined.
Also, because PHP supports indexing into strings via offsets using the same syntax as array indexing, the following example holds true for all PHP versions:

See the section titled String access by character for more information.

Type Casting

	- Type casting works well on PHP like in C: the name of the desired type being chosen is written in parentheses before the variable that will be cast.

The casts allowed are:

(int), (integer) - cast to integer
(bool), (boolean) - cast to boolean
(float), (double), (real) - cast to float
(string) - cast to string
(array) - cast to array
(object) - cast to object
(unset) - cast to NULL
	
======================================================================================================================
VARIABLES
VARIABLES

Basics
	Variables are represented by a dollar sign followed by the variable name which also case-sensitive.

* The $ is a special variable that can't be assigned.

When assign an expression to a variable, the entire value of the original expression is copied into the destination variable.

There is also another way of assigning a value to variables by reference. simply prepend an ampersand (&) to the beginning of the variable which is being assigned (the source variable). For instance, the following code snippet outputs 'My name is Bob' twice: 

Initializing variables is a good practice. Uninitialized variables have a  default value of their type like boolenas default to FALSE, integers and floats default to zero string are set as an empty string and arrays become to an empty array.

PREDEFINED VARIABLES
	-  PHP provides a large number of predefined variables to any script which it runs. Many of these variables, however, cannot be fully documented as they are dependent upon which server is running, the version and setup of the server, and other factors. Some of these variables will not be available when PHP is run on the command line. For a listing of these variables, please see the section on Reserved Predefined Variables.

VARIABLE SCOPE

	- is the context within which it is defined. For the most part all PHP variables only have a single scope. This single scope spans included and required files as well. For exampl

	<?php
	$a = 1;
	include 'b.inc';
	?>

$a variable will be available within the included b.inc script. However, within user-defined functions a local function scope is introduced and it is limited only to the local function scope.

<?php
$a = 1; /* global scope */ 

	function test()
	{ 
	    echo $a; /* reference to local scope variable */ 
	} 

	test();
	?>

VARIABLE VARIABLES

	- Having a variable variable names is convenient and can be set and used dynamically. 


	- A variable variable takes the value of a variable and treats that as the name of a variable. In the above example, hello, can be used as the name of a variable by using two dollar signs. i.e.
	- Two variables are now stored and defined in the PHP symbol tree: $a with contents " hello and $hello with contents "world". 
In order to use variable variables with arrays, you have to resolve an ambiguity problem. That is, if you write $$a[1] then the parser needs to know if you meant to use $a[1] as a variable, or if you wanted $$a as the variable and then the [1] index from that variable. The syntax for resolving this ambiguity is: ${$a[1]} for the first case and ${$a}[1] for the second.

* Warning: Please note that variable variables cannot be used with PHP's Superglobal arrays within functions or class methods. The variable $this is also a special variable that cannot be referenced dynamically.

VARIABLES FROM EXTERNAL SOURCES

HTML Forms (GET and POST)

	- When a form is submitted to a PHP script, the information from that form is automatically made available to the script. There are few ways to access this information, for example:

======================================================================================================================
CONSTANTS

	Constant is known as an identifier(name) for a simple value that cannot be changed during the execution of the script(except for magic constants because it is not actually a constants). A constant is case-sensitive that is why constant identifiers are always in uppercase.

	The name of a constant follows the same rules as any label in PHP. A valid constant name starts with a letter or underscore, followed by any number of letters, numbers, or underscores. As a regular expression, it would be expressed thusly: [a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*

Syntax

You can determine a constant with the use of define() function or the keyword const as of PHP 5.3.0. However, the const keyword has a limit to be interpreted to an arbitrary expression. The constant cannot be changed anymore when it is defined already.

The following are the differences of constants and variables with each other:

	- A dollar sign ($) is not necessary in constants.
	- In PHP 5.3, defining a constant can only be done with the use of define() function and not by simple assignment.
	- Constants can be obtained anywhere with no regards to variable scoping rules.
	- When the constants has been set already, it is not possible now to redefined or undefined it.
	- Lastly, constants may only evaluate to scalar values. As of PHP 5.6 it is possible to define array constant using const keywords and as of PHP 7 array constants can also be defined using define() You may use arrays in constant scalar expressions (for example, const FOO = array(1,2,3)[0];), but the end result must be a value of allowed type.

Magic constants
	
A large number of predefined constants is given by PHP to any script which it runs but many of these constants are made by various extensions, and will only be present when those extensions are available either vial dynamic loading or because they have been compiled in.

There are nine magical constants that change depending on where they are used. For example, the value of __LINE__ depends on the line that it's used on in your script. All these "magical" constants are resolved at compile time, unlike regular constants, which are resolved at runtime.

							A few "magical" PHP constants
	Name			Description
	__LINE__		The current line number of the file.
	__FILE__		The full path and filename of the file with symlinks resolved. If used inside an include, the name of the included file is returned.
	__DIR__			The directory of the file. If used inside an include, the directory of the included file is returned. This is equivalent to dirname
	(__FILE__). 		This directory name does not have a trailing slash unless it is the root directory.
	__FUNCTION__		The function name.
	__CLASS__		The class name. The class name includes the namespace it was declared in (e.g. Foo\Bar). Note that as of PHP 5.4 	__CLASS__ 		works also in traits. When used in a trait method, __CLASS__ is the name of the class the trait is used in.
	__TRAIT__		The trait name. The trait name includes the namespace it was declared in (e.g. Foo\Bar).
	__METHOD__		The class method name.
	__NAMESPACE__		The name of the current namespace.
	ClassName::class	The fully qualified class name. See also ::class.
