BASIC SYNTAX

PHP tags
	- When PHP parses a file, it looks for opening and closing tags, which are <?php and ?> which tell PHP to start and stop interpreting the code between them.
	- If pure PHP code it is preferable to used the PHP closing tag, this will prevents accidental whitespace or new lines being added after the PHP closing tag. Causing different effects because PHP will start output buffering when there is no intention from the programmer to send and output at that point in the script.

<?php
 echo "Hello World";

//... more code

 echo "last Statement";

// the script ends here with no PHP closing tag

========================================================================
Escaping from HTML

<p>This is going to be ignored by PHP and displayed by the browser. </p>

<?php echo 'While this is going to be parsed.';?>

<p> This will also be ignored by PHP and displayed by the browser. </p>

	- when the PHP interpreter hits the ?> closing tags, it simply starts outputting whatever it finds until it hits another opening tag unless in the middle of a conditional statement in which case the interpreter will determine the outcome of the conditional before making a decision of what to skip over.

	Advanced escaping using conditions
		<?php if ($expression == true): ?>
  			This will show if the expression is true.
		<?php else: ?>
  			Otherwise this will show.
		<?php endif; ?>
	
	- PHP will skip the blocks where the condition is not met. PHP skips them according to the condition since the PHP interpreter will jump over blocks contained within a condition that is not met.

	- In PHP 5, there are up to five different pairs of opening and closing tags available in PHP, depending on how PHP is configured. Two of these, <?php ?> and <script language="php"> </script>, are always available. There is also the short echo tag <?= ?>, which is always available in PHP 5.4.0 and later.

*Also note that if you are embedding PHP within XML or XHTML you will need to use the <?php ?> tags to remain compliant with standards.

	-PHP 7 removes support for ASP tags and <script language="php"> tags. As such, we recommend only using <?php ?> and <?= ?> when writing PHP code to maximise compatibility.

1.  <?php echo 'if you want to serve PHP code in XHTML or XML documents,
                use these tags'; ?>

2.  You can use the short echo tag to <?= 'print this string' ?>.
    It's always enabled in PHP 5.4.0 and later, and is equivalent to
    <?php echo 'print this string' ?>.

3.  <? echo 'this code is within short tags, but will only work '.
            'if short_open_tag is enabled'; ?>

4.  <script language="php">
        echo 'some editors (like FrontPage) don\'t
              like processing instructions within these tags';
    </script>
    This syntax is removed in PHP 7.0.0.

5.  <% echo 'You may optionally use ASP-style tags'; %>
    Code within these tags <%= $variable; %> is a shortcut for this code <% echo $variable; %>
    Both of these syntaxes are removed in PHP 7.0.0.

	- ASP style tags (example five) are only available when they are enabled via the asp_tags php.ini configuration file directive, and have been removed in PHP 7.0.0.

*Using short tags should be avoided when developing applications or libraries that are meant for redistribution, or deployment on PHP servers which are not under your control, because short tags may not be supported on the target server. For portable, redistributable code, be sure not to use short tags.

========================================================================
Instruction Separation

	- You do not need to used a semicolon to terminating the last line of a PHP block. The closing tag for the block will include the immediately trailing newline if one is present.

<?php
    echo 'This is a test';
?>

<?php echo 'This is a test' ?>

<?php echo 'We omitted the last closing tag';

*Using a closing tag is optional but and some cases this is helpful when usung include or require, so unwanted whitespace will not occur at the end of files, and you will still be able to add headers to the response later.

========================================================================
Comments

<?php
    echo 'This is a test'; // This is a one-line c++ style comment
    /* This is a multi line comment
       yet another line of comment */
    echo 'This is yet another test';
    echo 'One Final Test'; # This is a one-line shell-style comment
?>

	-The “one-l ine” comment style remarks only PHP codes either the current block or the end of the line, whichever comes first, meaning HTML code with // … ?> or # … ?> before them will be printed; having ?> on the other hand breaks out PHP mode returning it to HTML mode while // or # doesn’t affect it. The asp_tags configuration directive acts the same with // %> and # %> when being enabled but the </script> tag cannot break out PHP mode in a one-line comment.

=========================================================================

TYPES

Introduction

PHP supports ten primitive types. 

Four Scalar types:

	- boolean
		- expresses a truth value. It can be either TRUE or FALSE.
	SYNTAX
	<?php
	$foo = True; // assign the value TRUE to $foo
	?>
	
	Converting to Boolean 
		- When converting to boolean, the following values are considered FALSE:

			- the boolean FALSE itself
			- the integer 0 (zero)
			- the float 0.0 (zero)
			- the empty string, and the string "0"
			- an array with zero elements
			- the special type NULL (including unset variables)
			- SimpleXML objects created from empty tags
			- Every other value is considered TRUE (including any resource and NAN).
	*-1 is considered TRUE, like any other non-zero (whether negative or positive) number!	

-----------------------------------------------------------------------------------------------------------------------------------------------------

	- integer
		- Integers can be specified in decimal (base 10), hexadecimal (base 16), octal (base 8) or binary (base 2) notation, optionally preceded by a sign (- or +).
		- To use octal notation, precede the number with a 0 (zero). To use hexadecimal notation precede the number with 0x. To use binary notation precede the number with 0b.
	
	<?php
	$a = 1234; // decimal number
	$a = -123; // a negative number
	$a = 0123; // octal number (equivalent to 83 decimal)
	$a = 0x1A; // hexadecimal number (equivalent to 26 decimal)
	$a = 0b11111111; // binary number (equivalent to 255 decimal)
	?>

Integer Overflow

	- If PHP encounters a number beyond the bounds of the integer type, it will be interpreted as a float instead. Also, an operation which results in a number beyond the bounds of the integer type will return a float instead.

Integer overflow on a 32-bit system

	<?php
	$large_number = 2147483647;
	var_dump($large_number);                     // int(2147483647)

	$large_number = 2147483648;
	var_dump($large_number);                     // float(2147483648)

	$million = 1000000;
	$large_number =  50000 * $million;
	var_dump($large_number);                     // float(50000000000)
	?>	

Integer overflow on a 64-bit system

	<?php
	$large_number = 9223372036854775807;
	var_dump($large_number);                     // int(9223372036854775807)

	$large_number = 9223372036854775808;
	var_dump($large_number);                     // float(9.2233720368548E+18)

	$million = 1000000;
	$large_number =  50000000000000 * $million;
	var_dump($large_number);                     // float(5.0E+19)
	?>

		- There is no division operator in PHP the 1/2 produce the float 0.5. The round() function provides better control over rounding.

Converting to Integer

	From booleans 
		FALSE will yield 0 (zero), and TRUE will yield 1 (one).

	From floating point numbers 
		When converting from float to integer, the number will be rounded towards zero.

	- Casts such as (int) or (integer) is used when converting a value to integer but in some parts of it, cast is not necessary because the value will automatically be converted when an operator requires an integer argument. Intval() function can converts a value to integer also.
If a resource is converted to an integer, then the result will be the unique resource number assigned to the resource by PHP at runtime.

*Never cast an unknown fraction to integer, as this can sometimes lead to unexpected results.

<?php
echo (int) ( (0.1+0.7) * 10 ); // echoes 7!
?>

--------------------------------------------------------------------------------------------------------------------------------------------------

- float (floating-point number, aka double)
		- can be specified using any of the following syntaxes:
			<?php
			$a = 1.234; 
			$b = 1.2e3; 
			$c = 7E-10;
				?>
	Formally:

		LNUM          [0-9]+
		DNUM          ([0-9]*[\.]{LNUM}) | ({LNUM}[\.][0-9]*)
		EXPONENT_DNUM [+-]?(({LNUM} | {DNUM}) [eE][+-]? {LNUM})

	- The size of a float is platform-dependent, although a maximum of ~1.8e308 with a precision of roughly 14 decimal digits is a common value (the 64 bit IEEE format).

	Converting to float
		- For values of other types, the conversion is performed by converting the value to integer first and then to float.

	Comparing Float
		- Testing floating point values for equality is problematic, due to the way that they are represented internally but there are ways to make comparisons of floating point values that work around these limitations.

		- To test floating point values for equality, an upper bound on the relative error due to rounding is used. This value is known as the machine epsilon, or unit round off, and is the smallest acceptable difference in calculations.

		$a and $b are equal to 5 digits of precision.
			<?php
			$a = 1.23456789;
			$b = 1.23456780;
			$epsilon = 0.00001;

			if(abs($a-$b) < $epsilon) {
			    echo "true";
			}
			?>

	Nan
	- Some numeric operations can result in a value represented by the constant NAN. This result represents an undefined value in floating-point calculations. Any loose or strict comparisons of this value against any other value, including itself, but except TRUE, will have a result of FALSE.

	- NAN represents any number of different values and should not be compared to other values, including itself instead it should be checked for using is_nan().

----------------------------------------------------------------------------------------------------------------------------------------------------
	- string
		-A string is series of characters, where a character is the same as a byte. This means that PHP only supports a 256-character set, and hence does not offer native Unicode support.
	SYNTAX
		- single quoted
		- double quoted
		- heredoc syntax
		- nowdoc syntax 

-----------------------------------------------------------------------------------------------------------------------------------------------------

Four compound types:	
	- array
	- object
	- callable
	- iterable

And Finally two special types:

	- resource 
	- NULL

This manual also introduces some pseudo-types for readability reasons:

	- mixed
	- number
	- callback (aka callable)
	- array| object
	- void

And the pseudo-variable $ ....

	- Some References to the type " double " may remain in the manual. Consider double the same as float.

*Note: To check the type and value of an expression, use the var_dump() function.

To get a human-readable representation of a type for debugging, use the gettype() function. To check for a certain type, do not use gettype(), but rather the is_type functions. Some examples:

<?php
$a_bool = TRUE;   // a boolean
$a_str  = "foo";  // a string
$a_str2 = 'foo';  // a string
$an_int = 12;     // an integer

echo gettype($a_bool); // prints out:  boolean
echo gettype($a_str);  // prints out:  string

// If this is an integer, increment it by four
if (is_int($an_int)) {
    $an_int += 4;
}

// If $a_bool is a string, print it out
// (does not print out anything)
if (is_string($a_bool)) {
    echo "String: $a_bool";
}
?>

(not done)
=========================================================================

