ABOUT THIS DOCUMENTATION
Its main function is to explain in a way that it is simple and understandable  of how Node.js API being a reference and a conceptual point of view. Appropriate, arguments and property types are listed in a detailed manner just below the topic heading.
ASSERTION TESTING (ASSERT)
It is a module providing some set of assertion tests to tests invariants, strict and legacy mode exist in this module when recommended in strict mode.
ASYNC HOOKS
This module tracks lifetime asynchronous resources made inside a Node.js application, this is done when API register’s callback.
BUFFER
This was introduced as part of the Node.js API enabling connection with octet streams in TCP streams, file system operations and other context.
C ++ ADDONS
This are usually linked shared objects written in C ++ that can be placed inside Node.js using require() function and can be used as if they are just ordinary module. Also provides an interface between KavaScript running in Node.js and C/C ++ comtrol libraries.
C/C ++ ADDONS – N- API
It is for building native addons, independent on relying with JavaScript runtime and maintained as part of Node.js itself.
CHILD PROCESSES
This is making a child processes similar but not identical in view.
CLUSTER
In taking advantage of the multi core system, cluster comes in when a user needs the Node.js to handle the load because a single Node.js runs in a single thread only.
COMMAND LINE OPTIONS
These options built-in debugging, multiple ways to use scripts and other helpful runtime options.
CONSOLE
This provides simple debugging console that is similar with JavaScript console mechanism given by web browser.
CRYPTO
This gives a cryptographic functionality including a set of wrappers for open SSL’s hash, HMAC, cipher, decipher, sign and verify functions.
DEBUGGER
In successfully using this method start Node.js with inspect argument following the path to the script for debugging, lastly a prompt is displayed indicating a successful launch.
DEPRECATED API’s
Node.js is considered depricated when API are (1) utilization of API is completely unsafe (2) newly improved API has been established (3) breaking changes to API are expected in future major release.
Node.js utilize 3 kinds of deprecations
1 documentation only
2 runtime
3 end of life
DNS
this contains to function that are belonging into 2 categories
1 functions that use the underlying operation system facilities to do name resolution and;
2  function that connects to actual DNS server to perform name resolution.
DOMAIN
Pending deprecation is what this module d because once a replacement API has been finalized, this module will be fully deprecated. Most of end users are not into using this module.
ECMAScript MODULE
Basing upon the Node.js EP for ES Modules, Node.js contains support for ES Module but in this category error messages are still possible and being polished.
ERRORS
Errors are categorized by six when running a Node.js application.
1 <EvalError> thrown when a call to eval() fails.
2 <SyntaxError> thrown in response to improper JavaScript language syntax.
3 <RangeError> thrown when a value is not within expected range
4 <ReferenceError> thrown when using undefined variables
5 <TypeError> thrown when passing argument to a wrong type
6 <URIError> thrown when a global URI handling function is misused.
EVENTS

FILE SYSTEM
Fs modules gives an API for connecting with the file system in a manner that is modeled around standard POSIX Functions.
GLOBAL OBJECTS(GLOBALS)
These objects can be seen in all module but there are certain cases that they may seem to to be gobal but apparently not. They only exist in the scope of modules.
HTTP
In utilizing HTTP server and client (‘http’) is required. In Nodes.js, http are designed many features of the protocols that are difficult to use before.
HTTP/2 
This module gives an implementation of HTTP/2 protocol.
HTTPS
It is the HTTP protocol over TLS/SSL  and is implemented as a different module in Node.js.
INSPECTOR
It gives an API that connects with the V8 inspector.
INTERNALIZATION

MODULES
Each file is being considered as separate module in Node.js module system.
NET
This module gives asynchronous network API for making stream-based TCP or IPC servers such as (net.createServer() ) and clients (net.createConnection() ).
OS
This module gives a number of operating system-related utility methods.
PATH
This module gives utilities for working with file and directory paths
PERFORMANCE HOOKS
The Performance Timing API provides an implementation of the W3C Performance Timeline specification. The purpose of the API is to support collection of high resolution performance metrics. This is the same Performance API as implemented in modern Web browsers
PROCESS
The process object is a global that provides information about, and control over, the current Node.js process. As a global, it is always available to Node.js applications without using require().